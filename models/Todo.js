// models/Todo.js
const mongoose = require('mongoose');

const TodoSchema = new mongoose.Schema({
    text: String,
    completed: Boolean,
    priority: {
        type: String,
        enum: ['High', 'Medium', 'Low'],
        default: 'Medium'
    },
    dueDate: Date,
    userId: { // This is 'user', not 'userId', based on your working model
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    tags: [String],
    order: Number, // Add order field
    reminderTime: { // NEW FIELD for reminder
        type: Date,
        default: null // Can be null if no reminder is set
    },
    description: {
        type: String,
        default: '',
        trim: true,
    },
    createdAt: {
        type: Date,
        default: Date.now,
    },
    subtasks: [
        {
            text: {
                type: String,
                required: true,
                trim: true,
            },
            completed: {
                type: Boolean,
                default: false,
            }
        }
    ],
    recurrence: {
        type: String,
        enum: ['none', 'daily', 'weekly', 'monthly', 'yearly'],
        default: 'none',
    },
    recurrenceDetails: { // Stores details like day of week, day of month, etc.
        type: mongoose.Schema.Types.Mixed, // Use Mixed for flexible schema (e.g., {dayOfWeek: 1}, {dayOfMonth: 1})
        default: {},
    },
    lastRecurredDate: { // Stores the last date a recurring instance was generated from this recurring todo
        type: Date,
        default: null,
    },
    isRecurringInstance: { // To identify if this todo is an instance generated by a recurring rule
        type: Boolean,
        default: false,
    },
    recurringParentId: { // A link from an instance back to its recurring template
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Todo',
        default: null,
    },
    completedAt: {
    type: Date,
    default: null,
  },
    // NEW FIELD FOR ARCHIVING
    isArchived: {
        type: Boolean,
        default: false, // By default, new tasks are not archived
    },
    pinned: {
  type: Boolean,
  default: false,
}

});

TodoSchema.pre('save', async function(next) {
    if (this.isNew && this.order === undefined) {
        try {
            const count = await this.constructor.countDocuments({ userId: this.userId });
            this.order = count;
        } catch (error) {
            console.error('Error setting order for new todo:', error);
            return next(error);
        }
    }
    next();
});

module.exports = mongoose.model('Todo', TodoSchema);